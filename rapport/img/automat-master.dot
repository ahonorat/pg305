digraph coherence {

graph [fontname = "times"];
node [fontname = "times"];
edge [fontname = "times"];

    node
        [shape=Mrecord width=1.5];

    subgraph process_automaton {

        label="Process";

        //
        // States (Nodes)
        //

        "Process::Normal"
            [root="true" color="green" label="{Etat normal}"];

        "Process::Terminaison"
            [label="{Terminaison}"];

        "Process::Terminé"
            [color="red" label="{Terminé}"];

        //
        // Transitions (Edges)
        //

        "Process::Normal" -> "Process::Normal"
            [label=<Réception d'une demande de travail : ASK<BR/><FONT color="blue">S'il reste de tâches (1), sinon (2)<BR/>(1) Envoi d'une tâche à l'émetteur : INTER<BR/>(2) Envoi de l'attente de terminaison : FINISH</FONT>>];

	 "Process::Normal" -> "Process::Normal"
            [label=<Réception d'une fin de travail : NOTHING<BR/><FONT color="blue">Incrémentation du nombre d'esclaves terminés</FONT>>];
	    
        "Process::Normal" -> "Process::Terminaison"
            [label=<Réception du mot de passe : INTER<BR/><FONT color="blue">Envoi de la terminaison à l'émetteur : END<BR/>Incrémentation du nombre d'esclaves terminés</FONT>>];

        "Process::Terminaison" -> "Process::Terminaison"
            [label=<Réception d'une demande de travail : ASK<BR/><FONT color="blue">Envoi de la terminaison à l'émetteur : END<BR/>Incrémentation du nombre d'esclaves terminés</FONT>>];
	    
        "Process::Terminaison" -> "Process::Terminé"
            [label=<Tous les esclaves ont terminé<BR/><FONT color="blue">Affiche le mot de passe s'il a été trouvé et termine.</FONT>>];    

	 "Process::Normal" -> "Process::Terminé"
            [label=<Tous les esclaves ont terminé<BR/><FONT color="blue">Affiche le mot de passe s'il a été trouvé et termine.</FONT>>];    
    }

}
